---
import { Image } from "astro:assets";
import { getCollection } from "astro:content";
import profilePic from "../../public/profile.png";
import Footer from "../components/Footer.astro";
import Project from "../components/Project.astro";
import Layout from "../layouts/Layout.astro";
import Blog from "../components/Blog.astro";
import links from "../util/links";
import { generateAutoSummary } from "../util/generateAutoSummary";
import readingMinsEstimation from "../util/readTimeEstimation";
import getTitle from "../util/getTitle";

// Get all entries from a collection.
// Requires the name of the collection as an argument.
// Example: retrieve `src/content/blog/**`
const allProject = (await getCollection("projects")).filter(
  (project) => !project.data.isArchive,
);
allProject.sort((b, a) => b.data.order - a.data.order);

const allBlog = (await getCollection("blogs"))
  .filter((blog) => blog.data.published && !blog.data.isArchive)
  .map((blog) => {
    blog.data.title = getTitle(blog);
    return blog;
  })
  .sort((b, a) => {
    // biome-ignore lint/style/noNonNullAssertion: filter already eliminates null values
    return a.data.published!.getTime() - b.data.published!.getTime();
  });

const allBlogMetadata = allBlog.map((blog) => {
  const body = blog.body || "";
  const summary = generateAutoSummary(body);
  const readMin = readingMinsEstimation(body);
  const seriesName = blog.id.includes("/") ? blog.id.split("/")[0] : undefined;

  return {
    readMin,
    summary,
    seriesName,
  };
});
---

<Layout title="Simho" description="Ho Sim's personal website">
  <main
    class="flex px-5 xl:px-20 py-20 flex-col w-full h-full justify-between items-center"
  >
    <div class="flex flex-col lg:flex-row w-full justify-center gap-10">
      <div class="lg:w-64">
        <section
          class="gap-y-2 items-center flex flex-col h-fit border-stone-700 p-3 rounded-xl lg:bg-stone-800 lg:border w-full min-w-[16rem]"
        >
          <Image
            src={profilePic}
            alt="Profile pic"
            quality={100}
            class="rounded-lg border-stone-700 border-1 w-48 h-48 lg:w-auto lg:h-auto"
          />
          <div class="flex items-center lg:items-start flex-col gap-y-2">
            <p class="text-2xl font-semibold text-center lg:text-start">
              Hi! I'm Ho Sim <br /> (심호).
            </p>

            <p
              class="flex gap-y-1 max-w-xl flex-col text-center lg:text-start text-balance"
            >
              I'm building a system that privately organize personal data and
              create apps that reveal insights from them.
              <span></span>
              I'm invested in technologies that empower individuals to get more done
              and enhance digital freedom.
            </p>

            <a
              class="text-indigo-300 hover:text-indigo-400 ease-in-out transition-colors duration-200"
              href="./me">more about me</a
            >

            <div class="flex self-center justify-between">
              <nav class="flex gap-4">
                {
                  links.map((link) => (
                    <a
                      title={link.name}
                      href={link.link}
                      class={
                        "flex w-6 h-6 hover:text-indigo-400 ease-in-out transition-colors duration-200 " +
                        link.icon
                      }
                    >
                      <p>{link.name}</p>
                    </a>
                  ))
                }
              </nav>
            </div>
          </div>
        </section>
      </div>

      <div class="md:w-full flex max-w-6xl flex-col items-center gap-y-20">
        <section
          class="flex flex-col gap-y-10 items-center justify-center w-full"
        >
          <div class="text-center flex-col flex gap-1">
            <h1 class="text-5xl font-extrabold">Projects</h1>
          </div>

          <div
            class="grid auto-cols-auto md:grid-cols-2 2xl:grid-cols-3 flex-wrap gap-5"
          >
            {
              allProject.map((project) => (
                <Project
                  title={project.data.title}
                  ref={project.id.split("/").at(-1) || ""}
                  img={project.data.headerImage}
                  alt={project.data.headerAlt}
                >
                  <p transition:name={project.data.title + " summary"}>
                    {project.data.summary}
                  </p>
                </Project>
              ))
            }
          </div>
        </section>

        <section class="w-full flex items-center flex-col gap-y-10 max-w-2xl">
          <h1 class="text-5xl font-extrabold">Writing</h1>
          {
            allBlog.length ? (
              allBlog.map((blog, i) => (
                <a
                  class="flex w-full flex-col gap-y-1"
                  aria-label={`Read ${blog.data.title}`}
                  href={"/blogs/" + blog.id.split("/").at(-1)}
                >
                  <Blog
                    title={blog.data.title as string}
                    seriesName={allBlogMetadata[i].seriesName}
                    readMin={allBlogMetadata[i].readMin}
                    published={blog.data.published}
                    summary={allBlogMetadata[i].summary}
                  />
                </a>
              ))
            ) : (
              <p>Coming soon...</p>
            )
          }
        </section>
      </div>
    </div>

    <Footer />
  </main>
</Layout>
