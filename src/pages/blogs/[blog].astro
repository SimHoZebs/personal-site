---
import { getCollection, render } from "astro:content";
import ContentLayout from "../../layouts/ContentLayout.astro";
import { generateAutoSummary } from "../../util/generateAutoSummary";
import getTitle from "../../util/getTitle";
import readingMinsEstimation from "../../util/readTimeEstimation";

export async function getStaticPaths() {
  const blogArray = await getCollection("blogs");
  return blogArray.map((blog) => {
    return {
      params: { blog: blog.id.split("/").at(-1) },
      props: { blog },
    };
  });
}

const { blog } = Astro.props;

const title = getTitle(blog);
const autoSummary = generateAutoSummary(blog.body || "", blog.data.summary);

const { Content } = await render(blog);

// Determine series name from subdirectory (exclude 'archive')
const seriesName = blog.id.includes("/") ? blog.id.split("/")[0] : undefined;
const showSeries = seriesName && seriesName.toLowerCase() !== "archive";
---

<ContentLayout title={title} summary={autoSummary}>
  <div slot="header" class="flex flex-col gap-y-2 items-center">
    <h1
      id={blog.data.title}
      class="text-4xl sm:text-5xl font-bold text-center"
      transition:name={title}
    >
      {title}
    </h1>
    <div
      class="items-center w-full justify-evenly flex flex-col gap-y-5 text-sm text-zinc-400"
    >
      {
        showSeries && (
          <p class="text-balance" transition:name={`${title} series`}>
            #{seriesName}
          </p>
        )
      }
      <div class="flex gap-x-5 justify-evenly">
        <p class="text-balance" transition:name={`${title} published`}>
          Published: {
            blog.data.published?.toUTCString().split(" ").slice(1, 4).join(" ")
          }
        </p>
        {
          blog.data.edited && (
            <p class="text-balance">
              Edited:{" "}
              {blog.data.edited?.toUTCString().split(" ").slice(1, 4).join(" ")}
            </p>
          )
        }
        {
          blog.body && (
            <p class="whitespace-nowrap" transition:name={`${title} read-time`}>
              ~{readingMinsEstimation(blog.body)} min read
            </p>
          )
        }
      </div>
    </div>
  </div>

  <Content />
</ContentLayout>
